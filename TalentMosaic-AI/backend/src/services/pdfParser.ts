import pdfParse from "pdf-parse";
import { franc } from "franc";
import translate from "google-translate-api-x";

export class PDFParser {
    static sectionSynonyms = {
        about: [
            "resumen", "sobre m√≠", "perfil profesional", "perfil", "acerca de m√≠", "presentaci√≥n", "bio"
        ],
        experience: [
            "experience", "work experience", "employment history", "career history",
            "job experience", "professional experience", "work history", "relevant experience",
            "background", "historial laboral", "experiencia profesional", "empleo",
            "trayectoria profesional", "historia laboral", "vida laboral", "historial de trabajo",
            "carrera profesional", "Perfil Profesional", "puestos desempe√±ados", "proyectos profesionales", "mis trabajos"
        ],
        education: [
            "education", "academic background", "studies", "educational background",
            "schooling", "academic history", "training", "educational qualifications",
            "formation", "diplomas", "certificaciones acad√©micas", "titulaciones", "nivel educativo",
            "grados obtenidos", "carrera universitaria", "universidad", "instituci√≥n acad√©mica",
            "preparaci√≥n acad√©mica", "postgrados", "doctorados", "formaci√≥n complementaria"
        ],
        skills: [
            "skills", "technical skills", "competencies", "abilities", "capabilities",
            "hard skills", "soft skills", "aptitudes", "expertise", "tech stack",
            "tools used", "habilidades", "conocimientos", "aptitudes t√©cnicas",
            "capacidades", "conocimientos t√©cnicos", "habilidades digitales",
            "habilidades profesionales", "software manejado", "conocimientos espec√≠ficos",
            "tecnolog√≠as manejadas", "frameworks", "librer√≠as", "lenguajes de programaci√≥n"
        ],
        languages: [
            "languages", "spoken languages", "language proficiency", "linguistic abilities",
            "bilingual", "multilingual", "fluency", "idiomas", "lenguas habladas",
            "conocimientos de idiomas", "competencias ling√º√≠sticas", "idiomas dominados",
            "idiomas hablados", "idiomas conocidos", "lenguas extranjeras", "fluidez en idiomas",
            "niveles de idioma", "idiomas nativos", "lenguaje de negocios"
        ],
        certifications: [
            "certifications", "certs", "diplomas", "professional certifications",
            "training", "credentials", "licenses", "accreditations", "certifications obtained",
            "certificaciones", "cursos", "diplomados", "t√≠tulos", "licencias profesionales",
            "habilitaciones", "formaci√≥n especializada", "certificados de competencia",
            "cursos aprobados", "certificados oficiales"
        ],
        projects: [
            "projects", "portfolio", "side projects", "freelance work", "research projects",
            "trabajos freelance", "proyectos personales", "colaboraciones", "investigaciones",
            "desarrollo de proyectos", "trabajos previos", "implementaciones"
        ],
        personal_info: [
            "personal information", "contact details", "profile", "perfil",
            "informaci√≥n personal", "datos personales", "contacto",
            "nombre", "correo electr√≥nico", "direcci√≥n", "tel√©fono",
            "perfil profesional", "resumen personal", "bio", "sobre m√≠"
        ],
        academic_data: [
            "degrees", "diplomas", "postgraduate", "phd", "masters", "doctorate",
            "t√≠tulos universitarios", "estudios superiores", "especializaciones",
            "maestr√≠as", "doctorados", "grados acad√©micos", "investigaciones acad√©micas"
        ]
    };

    static cities = [
        // **Espa√±a**
        "madrid", "barcelona", "valencia", "sevilla", "zaragoza", "m√°laga", "murcia", "palma de mallorca", "las palmas de gran canaria", 
        "bilbao", "alicante", "c√≥rdoba", "vigo", "valladolid", "a coru√±a", "granada", "oviedo", "san sebasti√°n", "toledo", "salamanca", 
        "le√≥n", "santiago de compostela", "burgos", "gij√≥n", "c√°diz", "tarragona", "alcoy", "pamplona", "huelva", "girona", 
        "fuenlabrada", "l√©rida", "sabadell", "badalona", "hospitalet de llobregat",
    
        // **Europa (ajustado a ciudades relevantes para desarrolladores de software y tecnolog√≠a)**
    
        // **Reino Unido**
        "londres", "manchester", "birmingham", "glasgow", "edinburgo",
    
        // **Alemania**
        "berl√≠n", "munich", "hamburgo", "fr√°ncfort", "stuttgart",
    
        // **Francia**
        "par√≠s", "lyon", "toulouse",
    
        // **Pa√≠ses Bajos (Holanda)**
        "√Åmsterdam", "rotterdam", "utrecht",
    
        // **Espa√±a**
        "madrid", "barcelona",
    
        // **Suecia**
        "estocolmo", "gotemburgo",
    
        // **Irlanda**
        "dubl√≠n", // Un hub clave para el desarrollo de software, con muchas empresas de tecnolog√≠a
    
        // **Finlandia**
        "helsinki",
    
        // **Suiza**
        "z√∫rich", "ginebra",
    
        // **Estonia**
        "tallin", // Reconocida por su ecosistema de startups y su gobierno digital
    
        // **Portugal**
        "lisboa", "porto",
    
        // **Polonia**
        "varsovia", "cracovia", "wroclaw", "poznan", // Con un crecimiento tecnol√≥gico significativo
    
        // **Hungr√≠a**
        "budapest",
    
        // **Ruman√≠a**
        "bucarest", "cluj-napoca", // Hubs tecnol√≥gicos en Europa del Este
    
        // **Serbia**
        "belgrado",
    
        // **Rest of the World (Resto del Mundo)**
    
        // **Am√©rica del Norte**
        "nueva york", "los √°ngeles", "san francisco", "miami", "toronto", "montreal", "vancouver", "chicago", "boston", "dallas", "austin",
    
        // **Am√©rica Latina**
        "sao paulo", "buenos aires", "m√©xico df", "santiago de chile", "bogot√°", "rio de janeiro", "lima", "quito", "caracas", "monterrey",
    
        // **Asia**
        "tokio", "shangh√°i", "beijing", "singapur", "bangkok", "mumbai", "delhi", "se√∫l", "manila", "dubai", "ho chi minh", "kuala lumpur", "jakarta", "se√∫l", "hong kong", "taipei", "dhaka", "karachi", "ho chi minh city", "islamabad", "chennai", "mumbai", "bengaluru", "chandigarh",
    
        // **Ocean√≠a**
        "s√≠dney", "melbourne", "auckland", "wellington", "brisbane", 
    
        // **√Åfrica**
        "johannesburgo", "cairo", "lagos", "nairobi", "cape town", "abidjan", "addis abeba", "casablanca", "tunis", "dakar", "accra", "kinshasa",
    
        // **Ocean√≠a**
        "s√≠dney", "melbourne", "auckland", "wellington", "brisbane", "perth", 
    
        // **Medio Oriente**
        "dubai", "riyad", "tel aviv", "amman", "beirut", "doha", "abu dhabi"
    ];
    
    
    static async extractTextFromBuffer(buffer: Buffer): Promise<any> {
        try {
            const data = await pdfParse(buffer);
            let text = data.text.toLowerCase().trim();

            if (!text || text.length < 20) throw new Error("El texto extra√≠do es demasiado corto");

            // üîπ Limpieza de texto
            text = text
                .replace(/\S+@\S+\.\S+/g, "[EMAIL REMOVIDO]")
                .replace(/\+?\d[\d\s\-().]{8,}/g, "[TEL√âFONO REMOVIDO]");

            // üîπ Traducci√≥n si es necesario
            const detectedLang = franc(text);
            if (detectedLang !== "spa") {
                const translated = await translate(text, { to: "es" });
                text = translated.text.toLowerCase();
            }

            // üîç Helper para encontrar secci√≥n por sin√≥nimos
            const extractSection = (text: string, keywords: string[]): string => {
                const regex = new RegExp(
                    `(${keywords.join("|")})\\s*[:\\-\\n]?\\s*([\\s\\S]*?)(?=\\n\\s*(${Object.values(this.sectionSynonyms).flat().join("|")})\\s*[:\\-\\n]|$)`,
                    "i"
                );
                const match = text.match(regex);
                return match ? match[2].trim() : "";
            };

            // üìç Ubicaciones comunes (ahora ciudades principales)
            const locationMatch = text.match(
                new RegExp(`(${this.cities.join("|")})`, "i")
            );
            const location = locationMatch ? locationMatch[1] : "Desconocida";

            // üîç Extraer secciones
            const aboutRaw = extractSection(text, this.sectionSynonyms.about);
            const experienceRaw = extractSection(text, this.sectionSynonyms.experience);
            let educationRaw = extractSection(text, this.sectionSynonyms.education);
            let skillsRaw = extractSection(text, this.sectionSynonyms.skills);
            const languagesRaw = extractSection(text, this.sectionSynonyms.languages);
            const certificationsRaw = extractSection(text, this.sectionSynonyms.certifications);

            // ‚úÇÔ∏è Cortar educaci√≥n si contiene otras secciones
            educationRaw = educationRaw.split(/(idiomas|certificaciones|proyectos personales)/i)[0]?.trim() || educationRaw;

            // üõ† Parseadores comunes
            const listFromRaw = (raw: string): string[] =>
                raw.split(/‚Ä¢|\n|,|;|\|/).map(s => s.trim()).filter(s => s.length > 2);

            const skills = skillsRaw ? listFromRaw(skillsRaw) : ["Desconocidas"];
            const languages = languagesRaw ? listFromRaw(languagesRaw) : ["Desconocidos"];
            const certifications = certificationsRaw ? listFromRaw(certificationsRaw) : ["Desconocidas"];

            // ‚è≥ Extraer a√±os de experiencia si hay
            let experience = 0;
            const yearMatches = [...experienceRaw.matchAll(/(\d{4})\s*[-‚Äì]\s*(\d{4}|actualidad|presente)/gi)];
            console.log("A√±os de experiencia encontrados:", yearMatches);  // Debugging line
            if (yearMatches.length) {
                experience = yearMatches.reduce((acc, match) => {
                    const start = parseInt(match[1]);
                    const end = match[2].match(/actualidad|presente/i) ? new Date().getFullYear() : parseInt(match[2]);
                    return acc + (end - start);
                }, 0);
            } else {
                // Si no se encuentran rangos de fechas expl√≠citos, intentamos buscar experiencias relacionadas con roles
                const estimatedRoles = experienceRaw.split(/\n/).filter(line =>
                    /(desarrollador|engineer|programador|analista|consultor|cto|freelance|intern)/i.test(line)
                );
                console.log("Roles estimados:", estimatedRoles);  // Debugging line
                if (estimatedRoles.length) {
                    experience = estimatedRoles.length;
                } else {
                    // Si no encontramos coincidencias claras, se intenta estimar experiencia de alguna otra forma,
                    // como un valor predeterminado o la cantidad de l√≠neas que coinciden con ciertos patrones.
                    experience = experienceRaw.split(/\n/).length; // Esto podr√≠a no ser perfecto, pero es una aproximaci√≥n
                }
            }

            const extractedData = {
                about: aboutRaw || "No disponible",
                experience,
                education: educationRaw || "No disponible",
                skills,
                location,
                languages,
                certifications
            };

            console.log("üì¶ Datos extra√≠dos:", extractedData);
            return extractedData;
        } catch (err) {
            console.error("‚ùå Error al procesar el PDF:", err);
            return { error: "No se pudo procesar el PDF" };
        }
    }
}
