# Esquema de Usuario
type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  role: String
  linkedInToken: String
  createdAt: String
  updatedAt: String
}

# Entrada para crear o actualizar un usuario
input CreateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  role: String
}

type Company{
    id: ID
    name: String
    industry: String
    size: Int
    createdAt: String
    updatedAt: String    
}

input CreateCompanyInput{
    name: String
    industry: String
    size: Int
}

scalar JSON

type Candidate {
    id: ID!
    companyId: ID!
    source: String
    linkedinProfile: String
    resume: JSON
    skills: String
    experience: Int
    education: String
    location: String
    createdAt: String
    updatedAt: String
  }

  # Entrada para crear o actualizar un candidato
  input CreateCandidateInput {
    companyId: ID!
    source: String!
    linkedinProfile: String
    resume: JSON
    skills: String
    experience: Int
    education: String
    location: String
  }

type CandidateRanking {
    id: ID!
    applicationId: ID!
    score: Int!
    ranking: Int!
    createdAt: String!
}

input CandidateRankingInput {
    applicationId: ID!
    score: Int!
    ranking: Int!
}

 # Esquema de CandidateFeedback
  type CandidateFeedback {
    id: ID!
    applicationId: ID!
    feedback: String
    rating: Int
    createdAt: String
  }

  # Entrada para crear o actualizar un feedback de candidato
  input CreateFeedbackInput {
    applicationId: ID!
    feedback: String!
    rating: Int!
  }

type Job {
    id: ID!
    companyId: ID
    jobTitle: String
    description: String
    location: String
    experienceRequired: Int
    skillsRequired: String
    educationRequired: String
    salaryRange: String
    createdAt: String
    updatedAt: String
  }

  # Entrada para crear o actualizar un trabajo
  input CreateJobInput {
    companyId: ID!
    jobTitle: String!
    description: String!
    location: String!
    experienceRequired: Int!
    skillsRequired: String!
    educationRequired: String!
    salaryRange: String!
  }

 # Esquema de Application
  type Application {
    id: ID!
    candidateId: ID!
    jobId: ID!
    status: String
    score: Int
    compatibility: Float
    createdAt: String
    updatedAt: String
  }

  # Entrada para crear o actualizar una aplicaci√≥n
  input CreateApplicationInput {
    candidateId: ID!
    jobId: ID!
    status: String
    score: Int
    compatibility: Float
  }

  # Tipo de retorno para login
  type AuthPayload {
    token: String!
    user: User!
  }


  # Entrada para login
  input LoginInput {
    email: String!
    password: String!
  }


  type FeedbackLog {
    id: ID!
    candidate_id: ID!
    user_id: ID!
    score_change: Float!
    created_at: String!
  }

  type AiTrainingData {
    id: ID!
    candidate_id: ID!
    job_id: ID!
    features: JSON!
    score: Float!
    created_at: String!
  }


  input CreateRankingInput {
    jobId: ID!
  }

  input CreateRankingInput {
    jobId: ID!
  }


type Query {
  getAllUsers: [User]
  getUserById(id: ID!): User

  getAllCompanies: [Company]
  getCompany(id: ID!): Company

  getAllJobs: [Job]
  getJobById(id: ID!): Job

  getAllApplications: [Application]
  getApplicationById(id: ID!): Application

  getAllCandidates: [Candidate]
  getCandidateById(id: ID!): Candidate

  getRanking(jobId: ID!): [CandidateRanking]
  getCandidateRanking(candidateId: ID!): CandidateRanking

  getAllFeedbacks: [CandidateFeedback]
  getFeedbackById(id: ID!): CandidateFeedback

  getFeedbackLogs: [FeedbackLog]
  getTrainingData: [AiTrainingData]
}

type Mutation {
  createUser(input: CreateUserInput): User
  updateUser(id: ID!, input: CreateUserInput): User
  deleteUser(id: ID!): Boolean
  register(input: CreateUserInput!): User
  login(input: LoginInput!): AuthPayload

  createJob(input: CreateJobInput): Job
  updateJob(id: ID!, input: CreateJobInput): Job
  deleteJob(id: ID!): Boolean

  createCompany(input: CreateCompanyInput): Company
  updateCompany(id: ID!, input: CreateCompanyInput): Company
  deleteCompany(id: ID!): Boolean

  createCandidate(input: CreateCandidateInput): Candidate
  updateCandidate(id: ID!, input: CreateCandidateInput): Candidate
  deleteCandidate(id: ID!): Boolean


  createApplication(input: CreateApplicationInput): Application
  updateApplication(id: ID!, input: CreateApplicationInput): Application
  deleteApplication(id: ID!): Boolean

  createRanking(input: CreateRankingInput): CandidateRanking
  updateRanking(id: ID!, input: CreateRankingInput): CandidateRanking
  deleteRanking(id: ID!): Boolean

  createFeedback(input: CreateFeedbackInput): CandidateFeedback
  updateFeedback(id: ID!, input: CreateFeedbackInput): CandidateFeedback
  deleteFeedback(id: ID!): Boolean

  addFeedbackLog(candidate_id: ID!, user_id: ID!, score_change: Float!): FeedbackLog
  addTrainingData(candidate_id: ID!, job_id: ID!, features: JSON!, score: Float!): AiTrainingData
}
